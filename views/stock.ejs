<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <title>Stock Management</title>
    <link rel="stylesheet" href="/styles.css" />
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            margin: 20px;
            background-color: #f8f8f8;
            color: #333;
        }

        h1 {
            color: #0056b3;
            text-align: center;
            margin-bottom: 30px;
        }

        /* General form and input styling */
        form, #searchContainer {
            background-color: #fff;
            padding: 25px;
            border-radius: 8px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
            margin-bottom: 30px;
        }

        label {
            display: block;
            margin-bottom: 8px;
            font-weight: bold;
            color: #555;
        }

        input[type="text"],
        input[type="number"] {
            width: calc(100% - 22px); /* Account for padding and border */
            padding: 10px;
            margin-bottom: 15px;
            border: 1px solid #ddd;
            border-radius: 4px;
            box-sizing: border-box; /* Include padding and border in the element's total width and height */
        }

        button {
            background-color: #2c3e50 ;
            color: white;
            padding: 10px 18px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 16px;
            transition: background-color 0.3s ease;
            margin-right: 10px;
        }

        button:hover {
            background-color: #2c3e50;
        }

        /* Search specific styles */
        #searchContainer {
            display: flex;
            gap: 10px;
            align-items: center;
        }

        #searchBox {
            flex-grow: 1;
        }

        #suggestionsList {
            border: 1px solid #eee;
            list-style: none;
            padding: 0;
            margin: 5px 0 0 0;
            width: 100%;
            max-height: 150px;
            overflow-y: auto;
            box-shadow: 0 2px 5px rgba(0,0,0,0.05);
            background-color: #fff;
            border-radius: 4px;
        }

        #suggestionsList li {
            padding: 10px;
            cursor: pointer;
            border-bottom: 1px solid #f5f5f5;
        }

        #suggestionsList li:last-child {
            border-bottom: none;
        }

        #suggestionsList li:hover {
            background: #f0f0f0;
        }

        #searchResult {
            margin-top: 20px;
            padding: 15px;
            background-color: #e9f7ff;
            border: 1px solid #cce5ff;
            border-radius: 8px;
            box-shadow: 0 1px 3px rgba(0,0,0,0.08);
        }

        #searchResult strong {
            color: #333;
        }

        #searchResult input[type="number"] {
            display: inline-block;
            width: auto;
            margin: 0 5px 0 0;
            padding: 5px;
            font-size: 14px;
        }

        /* Table specific styles */
        .stock-table-container {
            background-color: #fff;
            padding: 25px;
            border-radius: 8px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
            margin-top: 30px;
        }

        table {
            border-collapse: collapse;
            width: 100%;
            margin-top: 20px;
        }

        th, td {
            border: 1px solid #e0e0e0;
            padding: 12px 15px;
            text-align: left;
        }

        th {
            background-color: #333;
            color: white;
            font-weight: bold;
            text-transform: uppercase;
        }

        tr:nth-child(even) {
            background-color: #f9f9f9;
        }

        tr:hover {
            background-color: #f1f1f1;
        }

        td:first-child {
            font-weight: bold;
        }

        /* Back to Home link */
        p {
            text-align: center;
            margin-top: 30px;
        }

        a {
            color: #333;
            text-decoration: none;
            font-weight: bold;
        }

        a:hover {
            text-decoration: underline;
        }
    </style>
</head>
<body>
    <h1>Stock Management</h1>

    <div id="searchContainer">
        <input type="text" id="searchBox" placeholder="üîç Search product by name..." oninput="showSuggestions()" />
        <button onclick="searchProduct()">üîé Enter</button>
        <ul id="suggestionsList"></ul>
    </div>
    <div id="searchResult"></div>

    <form id="addUpdateForm">
        <label>Product Name
            <input type="text" name="name" id="productName" required />
        </label>
        <label>Price (‚Çπ)
            <input type="number" name="price" id="productPrice" step="0.01" min="0" required />
        </label>
        <label>Quantity
            <input type="number" name="quantity" id="productQuantity" min="1" required />
        </label>
        <button type="submit">Add / Update Product</button>
    </form>

    <div class="stock-table-container">
        <h2>Current Stock</h2>
        <table>
            <thead>
                <tr><th>Name</th><th>Price (‚Çπ)</th><th>Quantity</th></tr>
            </thead>
            <tbody id="stockTable">
                <% if(products.length === 0){ %>
                    <tr id="noProductsRow"><td colspan="3">No products found.</td></tr>
                <% } else { %>
                    <% products.forEach(p => { %>
                        <tr id="row-<%= p.name.replace(/\s/g, '-') %>"> <% // Add unique ID for easier update/removal %>
                            <td><%= p.name %></td>
                            <td>‚Çπ<%= p.price.toFixed(2) %></td>
                            <td><%= p.quantity %></td>
                        </tr>
                    <% }) %>
                <% } %>
            </tbody>
        </table>
    </div>

    <p><a href="/">Back to Home</a></p>

    <script>
        // Get form elements
        const addUpdateForm = document.getElementById("addUpdateForm");
        const productNameInput = document.getElementById("productName");
        const productPriceInput = document.getElementById("productPrice");
        const productQuantityInput = document.getElementById("productQuantity");
        const stockTableBody = document.getElementById("stockTable");
        const noProductsRow = document.getElementById("noProductsRow");


        async function showSuggestions() {
            const query = document.getElementById("searchBox").value.trim();
            const suggestionsList = document.getElementById("suggestionsList");
            suggestionsList.innerHTML = ""; // Clear previous results

            if (!query) {
                return;
            }

            try {
                const res = await fetch(`/stock/products?query=${query}`);
                const products = await res.json();

                if (products.length === 0) { // Check for empty array
                    return;
                }

                products.forEach(product => {
                    const li = document.createElement("li");
                    li.textContent = product.name;
                    li.style.cursor = "pointer";
                    li.onclick = () => selectProduct(product.name);
                    suggestionsList.appendChild(li);
                });
            } catch (error) {
                console.error("Error fetching suggestions:", error);
                // Optionally display an error message to the user
            }
        }

        function selectProduct(name) {
            document.getElementById("searchBox").value = name;
            document.getElementById("suggestionsList").innerHTML = ""; // Hide suggestions
        }

        async function searchProduct() {
            const name = document.getElementById("searchBox").value.trim();
            const resultDiv = document.getElementById("searchResult");
            resultDiv.innerHTML = ""; 

            if (!name) {
                alert("Please enter a valid product name.");
                return;
            }

            try {
                const res = await fetch(`/stock/stock-product?name=${encodeURIComponent(name)}`);
                const productData = await res.json(); // Always parse JSON, even if it's an error object

                // Check if response was not OK or if the server explicitly returned an error object
                if (!res.ok || productData.error) {
                    resultDiv.innerHTML = `<p>${productData.error || 'Product not found.'}</p>`;
                    return;
                }
                
                // Use productData for displaying details
                resultDiv.innerHTML = `
                    <div style="border: 1px solid #ccc; padding: 10px; margin-top: 10px;">
                        <strong>${productData.name}</strong> <br />
                        Price: ‚Çπ<input type="number" id="editPrice" value="${productData.price}" /> <br />
                        Quantity: <input type="number" id="editQuantity" value="${productData.quantity}" /> <br />
                        <button onclick="updateProduct('${productData.name}')">‚úèÔ∏è Update</button>
                        <button onclick="deleteProduct('${productData.name}')">‚ùå Delete</button>
                    </div>
                `;
            } catch (error) {
                console.error("Error fetching product details:", error);
                resultDiv.innerHTML = `<p>Error loading data: ${error.message}</p>`;
            }
        }

        async function updateProduct(name) { // Corrected parameter name
            const priceInput = document.getElementById("editPrice");
            const quantityInput = document.getElementById("editQuantity");

            // Basic validation
            if (!priceInput || !quantityInput) {
                alert("Price or Quantity input elements not found.");
                return;
            }
            const price = priceInput.value;
            const quantity = quantityInput.value;

            if (isNaN(parseFloat(price)) || !isFinite(price) || parseFloat(price) < 0) {
                alert("Please enter a valid price.");
                return;
            }
            if (isNaN(parseInt(quantity)) || parseInt(quantity) < 0) {
                alert("Please enter a valid quantity.");
                return;
                }

            try {
                const res = await fetch(`/stock/update`, {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({ name, price, quantity })
                });

                const data = await res.json();
                
                if (!data.success) {
                    throw new Error(data.error || "Failed to update product.");
                }

                alert("Product updated successfully!");
                window.location.reload(); // Explicitly use window.location.reload() for clarity
            } catch (error) {
                console.error("Update error:", error);
                alert("Failed to update product: " + error.message);
            }
        }

        async function deleteProduct(name) { // Corrected parameter name
            if (!confirm(`Delete ${name} from stock?`)) {
                return;
            }

            try {
                const res = await fetch(`/stock/delete`, {
                    method: "DELETE",
                    headers: { "Content-Type": "application/json" }, 
                    body: JSON.stringify({ name }) 
                });

                const data = await res.json();
                
                if (!data.success) {
                    throw new Error(data.error || "Failed to delete product.");
                }

                alert("Product deleted successfully!");
                window.location.reload();
            } catch (error) {
                console.error("Delete error:", error);
                alert("Failed to delete product: " + error.message);
            }
        }

        // --- New code for Add/Update Form Submission ---
        addUpdateForm.addEventListener('submit', async (event) => {
                event.preventDefault(); // Prevent default form submission (stops page reload)

            const name = productNameInput.value.trim();
            const price = parseFloat(productPriceInput.value);
            const quantity = parseInt(productQuantityInput.value);

            if (!name || isNaN(price) || price < 0 || isNaN(quantity) || quantity < 1) {
                alert("Please fill in all fields with valid data.");
                return;
            }

            try {
                const res = await fetch('/stock/add', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({ name, price, quantity }),
                });

                const data = await res.json();

                if (data.success) {
                        alert(data.message);
                        updateStockTable(data.product); // Call a new function to update the table
                        addUpdateForm.reset(); // Clear the form fields
                } else {
                        alert("Error: " + (data.error || "Failed to add/update product."));
                }
            } catch (error) {
                    console.error("Error adding/updating product:", error);
                    alert("An error occurred while adding/updating the product.");
            }
        });

        function updateStockTable(product) {
                // Create a unique ID for the row based on product name (sanitize for HTML ID)
                const rowId = `row-${product.name.replace(/\s/g, '-')}`;
                let existingRow = document.getElementById(rowId);

                if (existingRow) {
                        // Update existing row
                        existingRow.children[0].textContent = product.name;
                        existingRow.children[1].textContent = `‚Çπ${product.price.toFixed(2)}`;
                        existingRow.children[2].textContent = product.quantity;
                } else {
                        // Remove "No products found." row if it exists
                        if (noProductsRow) {
                                noProductsRow.remove();
                        }

                        // Add new row
                        const newRow = document.createElement('tr');
                        newRow.id = rowId; // Assign the unique ID
                        newRow.innerHTML = `
                                <td>${product.name}</td>
                                <td>‚Çπ${product.price.toFixed(2)}</td>
                                <td>${product.quantity}</td>
                        `;
                        stockTableBody.appendChild(newRow);
                }
        }
    </script>
</body>
</html>